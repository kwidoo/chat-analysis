version: "3.8"
services:
  frontend:
    image: ${FRONTEND_IMAGE}
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: /api
      - NODE_ENV=production
      - VITE_API_URL=/api
    networks:
      - analysis-net
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - analysis-net
    container_name: rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    ports:
      - "15672:15672"

  dask-scheduler:
    image: ghcr.io/dask/dask:latest
    command: ["dask", "scheduler"]
    networks:
      - analysis-net
    container_name: scheduler
    hostname: scheduler
    restart: unless-stopped
    ports:
      - "8787:8787"  # Dashboard access
    deploy:
      resources:
        limits:
          memory: 4G

  dask-worker:
    image: ghcr.io/dask/dask:latest
    command: ["dask", "worker", "tcp://scheduler:8786"]
    environment:
      - DASK_SCHEDULER=tcp://scheduler:8786
    depends_on:
      - dask-scheduler
    networks:
      - analysis-net
    restart: unless-stopped
    deploy:
      replicas: 4  # More workers in production
      resources:
        limits:
          memory: 8G  # More memory per worker

  db:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-strongrootpassword}
      - MYSQL_DATABASE=${DB_DATABASE:-ai3_auth}
      - MYSQL_USER=${DB_USERNAME:-ai3user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-ai3password}
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"  # Expose port for external connections
    networks:
      - analysis-net
    profiles: []  # Empty profiles means always included
    deploy:
      resources:
        limits:
          memory: 1G

  backend:
    image: ${BACKEND_IMAGE}
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - DASK_SCHEDULER=tcp://scheduler:8786
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DB_TYPE=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-ai3_auth}
      - DB_USERNAME=${DB_USERNAME:-ai3user}
      - DB_PASSWORD=${DB_PASSWORD:-ai3password}
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      - DB_POOL_RECYCLE=3600
    depends_on:
      - rabbitmq
      - dask-scheduler
      - db
    networks:
      - analysis-net
    container_name: backend
    hostname: backend
    restart: unless-stopped
    volumes:
      - faiss_data:/app/faiss
      - uploads_data:/app/uploads
      - models_data:/app/models
    deploy:
      resources:
        limits:
          memory: 4G

  nginx:
    image: ${NGINX_IMAGE}
    # Removed volume mounting as configuration is now baked into the image
    networks:
      - analysis-net
      - nginx_proxy # Connect to external nginx_proxy network
    container_name: chat-analysis # Match this to what's expected by Nginx Proxy Manager
    hostname: chat-analysis
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST:-chat-analysis.example.com}
      - VIRTUAL_PORT=80
      - SERVER_NAME=${SERVER_NAME:-chat-analysis.example.com}
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

networks:
  analysis-net:
    driver: bridge
  nginx_proxy:
    external: true # Use existing external network

volumes:
  rabbitmq_data:
    driver: local
  faiss_data:
    driver: local
  uploads_data:
    driver: local
  models_data:
    driver: local
  db_data:
    driver: local
