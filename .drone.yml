kind: pipeline
type: docker
name: chat-analysis
node:
  machine: drone-ai

steps:
  # - name: test-backend
  #   image: python:3.10
  #   volumes:
  #     - name: docker_sock
  #       path: /var/run/docker.sock
  #   commands:
  #     - cd backend
  #     - pip install -r requirements.txt
  #     - pip install pytest
  #     - pytest tests/
  - name: build-backend
    image: plugins/docker
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    settings:
      repo: chat-analysis-backend
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - latest
      dockerfile: backend/Dockerfile
      context: backend/
      # Local builds - no registry needed
    when:
      branch:
        - main
  - name: build-frontend
    image: plugins/docker
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    settings:
      repo: chat-analysis-frontend
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - latest
      dockerfile: frontend/Dockerfile
      context: frontend/
      # Local builds - no registry needed
    when:
      branch:
        - main
  - name: build-nginx
    image: plugins/docker
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    settings:
      repo: chat-analysis-nginx
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - latest
      dockerfile: nginx/Dockerfile
      context: nginx/
      # Local builds - no registry needed
    when:
      branch:
        - main
  - name: deploy
    image: docker/compose:latest
    environment:
      BACKEND_IMAGE: chat-analysis-backend:${DRONE_COMMIT_SHA:0:8}
      FRONTEND_IMAGE: chat-analysis-frontend:${DRONE_COMMIT_SHA:0:8}
      NGINX_IMAGE: chat-analysis-nginx:${DRONE_COMMIT_SHA:0:8}
      RABBITMQ_USER:
        from_secret: rabbitmq_user
      RABBITMQ_PASSWORD:
        from_secret: rabbitmq_password
      FLASK_SECRET_KEY:
        from_secret: flask_secret_key
    commands:
      - docker-compose -f docker-compose.prod.yml up -d
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      branch:
        - main
services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock
trigger:
  branch:
    - main
    - develop
  event:
    - push
    - pull_request
    - custom
